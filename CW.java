/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Coursework;
import java.awt.Desktop;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import javax.swing.JTable;
import java.io.*;
/**
 *
 * @author USAB
 */
public class CW extends javax.swing.JFrame {

    /** Creates new form CW */
    public CW() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        qualityBtnGrp = new javax.swing.ButtonGroup();
        priceRangeBtnGrp = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        categoryLabel = new javax.swing.JLabel();
        categoryCombo = new javax.swing.JComboBox<>();
        kitIDLabel = new javax.swing.JLabel();
        kitNameLabel = new javax.swing.JLabel();
        brandLabel = new javax.swing.JLabel();
        qualityLabel = new javax.swing.JLabel();
        priceLabel = new javax.swing.JLabel();
        sizeLabel = new javax.swing.JLabel();
        priceRanLabel = new javax.swing.JLabel();
        recommendationLabel = new javax.swing.JLabel();
        priceField = new java.awt.TextField();
        kitNameField = new java.awt.TextField();
        kitIDField = new java.awt.TextField();
        brandField = new java.awt.TextField();
        sizeField = new java.awt.TextField();
        originalCheck = new javax.swing.JCheckBox();
        duplicateCheck = new javax.swing.JCheckBox();
        highcopyCheck = new javax.swing.JCheckBox();
        recommendationCombo = new javax.swing.JComboBox<>();
        lowRadio = new javax.swing.JRadioButton();
        mediumRadio = new javax.swing.JRadioButton();
        highRadio = new javax.swing.JRadioButton();
        clearBtn = new javax.swing.JButton();
        addBtn = new javax.swing.JButton();
        categoryFocus = new javax.swing.JLabel();
        kitIDFocus = new javax.swing.JLabel();
        kitNameFocus = new javax.swing.JLabel();
        qualityFocus = new javax.swing.JLabel();
        brandFocus = new javax.swing.JLabel();
        priceRanFocus = new javax.swing.JLabel();
        priceFocus = new javax.swing.JLabel();
        recommendationFocus = new javax.swing.JLabel();
        sizeFocus = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        priceSearchField = new javax.swing.JTextField();
        priceSearchBtn = new javax.swing.JButton();
        categorySearchBtn = new javax.swing.JButton();
        sortBtn = new javax.swing.JButton();
        categorySearchBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        helpMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 9));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel2.setText(" SPORTS-KIT Inventory System");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 9), "Item Form", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 24))); // NOI18N

        categoryLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        categoryLabel.setText("CATEGORY");

        categoryCombo.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        categoryCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Category--", "Football", "Cricket", "Basketball", "Table Tennis", "Volleyball" }));
        categoryCombo.setToolTipText("");
        categoryCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryComboActionPerformed(evt);
            }
        });

        kitIDLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        kitIDLabel.setText("KIT ID");

        kitNameLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        kitNameLabel.setText("KIT NAME");

        brandLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        brandLabel.setText("BRAND");

        qualityLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        qualityLabel.setText("KIT QUALITY");

        priceLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        priceLabel.setText("PRICE");

        sizeLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        sizeLabel.setText("SIZE");

        priceRanLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        priceRanLabel.setText("PRICE RANGE");

        recommendationLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        recommendationLabel.setText("RECOMMENDATION");

        priceField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceFieldActionPerformed(evt);
            }
        });

        kitIDField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kitIDFieldActionPerformed(evt);
            }
        });

        sizeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sizeFieldActionPerformed(evt);
            }
        });

        qualityBtnGrp.add(originalCheck);
        originalCheck.setText("Original");

        qualityBtnGrp.add(duplicateCheck);
        duplicateCheck.setText("Duplicate");

        qualityBtnGrp.add(highcopyCheck);
        highcopyCheck.setText("High copy");

        recommendationCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Recomendation--", "Professionals", "Manufacturers", "Not recommended" }));

        priceRangeBtnGrp.add(lowRadio);
        lowRadio.setText("Low");

        priceRangeBtnGrp.add(mediumRadio);
        mediumRadio.setText("Medium");
        mediumRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mediumRadioActionPerformed(evt);
            }
        });

        priceRangeBtnGrp.add(highRadio);
        highRadio.setText("High");
        highRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highRadioActionPerformed(evt);
            }
        });

        clearBtn.setText("CLEAR");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        addBtn.setText("ADD");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        categoryFocus.setForeground(new java.awt.Color(255, 0, 0));
        categoryFocus.setText(" ");

        kitIDFocus.setForeground(new java.awt.Color(255, 0, 51));
        kitIDFocus.setText(" ");

        kitNameFocus.setForeground(new java.awt.Color(255, 0, 51));
        kitNameFocus.setText(" ");

        qualityFocus.setForeground(new java.awt.Color(255, 0, 0));
        qualityFocus.setText(" ");

        brandFocus.setForeground(new java.awt.Color(255, 0, 51));
        brandFocus.setText(" ");

        priceRanFocus.setForeground(new java.awt.Color(255, 0, 0));
        priceRanFocus.setText(" ");

        priceFocus.setForeground(new java.awt.Color(255, 0, 0));
        priceFocus.setText(" ");

        recommendationFocus.setForeground(new java.awt.Color(255, 0, 0));
        recommendationFocus.setText(" ");

        sizeFocus.setForeground(new java.awt.Color(255, 0, 51));
        sizeFocus.setText(" ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(categoryLabel)
                            .addComponent(brandLabel)
                            .addComponent(qualityLabel)
                            .addComponent(kitIDLabel)
                            .addComponent(priceLabel))
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(priceRanLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(originalCheck)
                            .addComponent(kitIDFocus)
                            .addComponent(kitIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(categoryFocus)
                            .addComponent(categoryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(brandFocus)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lowRadio)
                                .addGap(66, 66, 66)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(highcopyCheck)
                                    .addComponent(mediumRadio)
                                    .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(56, 56, 56)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(highRadio)
                                    .addComponent(duplicateCheck)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(priceFocus)
                                    .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(priceRanFocus)
                            .addComponent(qualityFocus)
                            .addComponent(brandField, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(recommendationLabel)
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(sizeLabel)
                                    .addComponent(kitNameLabel))
                                .addGap(36, 36, 36)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(recommendationCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(recommendationFocus)
                            .addComponent(sizeField, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(kitNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(kitNameFocus))
                            .addComponent(sizeFocus))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(290, 290, 290))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(categoryFocus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(categoryLabel)
                    .addComponent(categoryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(kitIDFocus)
                        .addGap(3, 3, 3)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(kitIDLabel)
                                    .addComponent(kitIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(23, 23, 23)
                                .addComponent(qualityFocus)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(qualityLabel)
                                    .addComponent(originalCheck)
                                    .addComponent(highcopyCheck)
                                    .addComponent(duplicateCheck)))
                            .addComponent(kitNameLabel)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(kitNameFocus))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(kitNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(67, 67, 67)))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(brandFocus)
                    .addComponent(sizeFocus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(brandLabel)
                            .addComponent(brandField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sizeLabel))
                        .addGap(21, 21, 21)
                        .addComponent(priceRanFocus))
                    .addComponent(sizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(priceRanLabel)
                        .addComponent(lowRadio))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(mediumRadio)
                        .addComponent(highRadio)))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(recommendationFocus)
                    .addComponent(priceFocus, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(priceLabel)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(recommendationLabel)
                            .addComponent(recommendationCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 9), "Item Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 24))); // NOI18N

        priceSearchBtn.setText("SEARCH BY PRICE");
        priceSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceSearchBtnActionPerformed(evt);
            }
        });

        categorySearchBtn.setText("SEARCH BY  CATEGORY");
        categorySearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categorySearchBtnActionPerformed(evt);
            }
        });

        sortBtn.setText("SORT BY PRICE");
        sortBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortBtnActionPerformed(evt);
            }
        });

        categorySearchBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Football", "Cricket", "Basketball", "Table Tennis", "Volleyball" }));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "CATEGORY", "KIT ID", "KIT NAME", "KIT QUALITY", "BRAND", "SIZE", "PRICE RANGE", "PRICE", "RECOMMENDATION"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(priceSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(priceSearchBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 160, Short.MAX_VALUE)
                .addComponent(categorySearchBox, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(categorySearchBtn)
                .addGap(52, 52, 52))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(318, 318, 318)
                .addComponent(sortBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priceSearchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(categorySearchBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(categorySearchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sortBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(129, 129, 129)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 583, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenuBar1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jMenu1.setText("File");

        jMenuItem1.setText("Open");
        jMenuItem1.setVerifyInputWhenFocusTarget(false);
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Exit");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        helpMenu.setText("Help");
        helpMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuActionPerformed(evt);
            }
        });

        helpMenuItem.setText("Help");
        helpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(helpMenuItem);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void priceSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceSearchBtnActionPerformed
            boolean empty  = false;
            int nextRow = 0;
            String s;
            int colCount = table.getColumnCount();
            ArrayList <String> al = new ArrayList <String>();
            ArrayList <Integer> priceValue = new ArrayList <Integer>();
            // getting data from table and storing in the arraylist
            while(!empty){
                s = (String) table.getValueAt(nextRow,0);
                if(s == null){
                    empty = true;
                }
                else{
                    for (int i = 0; i < colCount; i++) {
                    String data = (String) table.getValueAt(nextRow,i);
                    al.add(data);       
                    }
               nextRow++;
                }
            }
            
             // taking aonly price values
            for (int i = 7; i < al.size(); i+=9) {
                priceValue.add(Integer.parseInt(al.get(i)));
            }
            
            
            //implementing binary search
           try{
               int find= Integer.parseInt(priceSearchField.getText());
               int low=0;
               int high=priceValue.size()-1;
               int index=binarySearch(priceValue,low,high,find);
               if(index >= 0){
                    int toShowRow = index;
                    ArrayList <String> toShow = new ArrayList<String>();
                    for (int i = 0; i < 9; i++) {
                        toShow.add((String)table.getValueAt(toShowRow,i));
                     }
                    JOptionPane.showMessageDialog(jPanel1,"Category: "+ toShow.get(0)+"\nKitID: "+toShow.get(1)+"\nKitName: "+toShow.get(2)+"\nKit Quality: "+toShow.get(3)+"\nBrand: "+toShow.get(4)+"\nSize: "+toShow.get(5)+"\nPrice Range: "+toShow.get(6)+"\nPrice: "+toShow.get(7)+ "\nRecommended By: "+toShow.get(8));
                }   
                else{
                    JOptionPane.showMessageDialog(jPanel1,"The searched ITEM doesn not exist");
                }
           }
           catch(Exception e){
               priceSearchField.grabFocus();
               JOptionPane.showMessageDialog(jPanel1,"Please Enter Valid Price in Number");
           }
            
            
            
    }//GEN-LAST:event_priceSearchBtnActionPerformed
    public  int binarySearch(ArrayList <Integer> priceValue, int low,int high,int find){
        if(low <= high){
            int mid=(low + high)/2;
            if(priceValue.get(mid) == find){
                return mid;
            }else if(priceValue.get(mid ) < find){
                return binarySearch(priceValue, mid+1, high,find);
            }else{
                return binarySearch(priceValue,low,mid-1,find);
            }
        }else{
            return -1;
        }
    }
    private void sortBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortBtnActionPerformed
         try{
            boolean empty  = false;
            int nextRow = 0;
            String s;
            int colCount = table.getColumnCount();
            ArrayList <String> al = new ArrayList <String>();
            ArrayList <Integer> priceValue = new ArrayList <Integer>();
            ArrayList <Integer> sortedPrice = new ArrayList <Integer>();
            // getting data from table and storing in the arraylist
            while(!empty){
                s = (String) table.getValueAt(nextRow,0);
                if(s == null){
                    empty = true;
                }
                else{
                    for (int i = 0; i < colCount; i++) {
                    String data = (String) table.getValueAt(nextRow,i);
                    al.add(data);       
                    }
               nextRow++;
                }
            }
            
             // taking aonly price values
            for (int i = 7; i < al.size(); i+=9) {
                priceValue.add(Integer.parseInt(al.get(i)));
            }
            //calling the sort method to sort the only price values
            sortedPrice = sort(priceValue);
            //adding sorted values in table
            //first of all getting the corresponding values of all the prices
            ArrayList <String> newData = new ArrayList<String>();
            for (int i = 0; i < sortedPrice.size(); i++) {
                for (int j = 0; j < al.size(); j++) {
                    if (sortedPrice.get(i).toString().equals(al.get(j))) {
                        if(!newData.contains(al.get(j-6)))
                             for (int k = j-7; k <= j+1 ; k++) {
                                newData.add(al.get(k));
                            }
                        }
                 }  
            } 
            
            //adding the actual sorted data in the table
            //clearTable(); //calling the clearTable method to clear the table first
            int rowss=0;
            int colss = table.getColumnCount();
            int pointer = 0;
            while(pointer < newData.size()){
                boolean isEmpty = false;
                do{
                    String t = (String) table.getValueAt(rowss,0);
                    if ( t!=null) {
                        rowss++;
                    }
                    else{
                        isEmpty=true;
                    }
                }while(isEmpty);
              
                    for (int j = 0; j < colss; j++) {
                        table.setValueAt(newData.get(pointer),rowss-1,j);
                        pointer++;
                    }
                     
            }
            
            
        }
        catch(Exception e){
                JOptionPane.showMessageDialog(null,"Already Sorted!!! \nCan't sort twice..");
        }
    }//GEN-LAST:event_sortBtnActionPerformed
   
    private  ArrayList sort(ArrayList<Integer> a){
        for(int i=0;i<a.size() -1;i++){
            int minPos = minPosFinder(a,i);
            swap(a,minPos,i);
        }
        return a;
    }
    
    private int minPosFinder(ArrayList<Integer> a, int point){
        int minPos=point;
        for(int i= point+1; i<a.size(); i++){
            if(a.get(minPos) >a.get(i)){
                minPos=i;
            }
        }
        return minPos;
    }
    
    private void swap(ArrayList<Integer> a, int minPos, int point){
        int temp=a.get(minPos);
        a.set(minPos,a.get(point));
        a.set(point,temp);
    }    private void clearTable(){
        
         for (int i =0; i < table.getRowCount(); i++) {
            for (int j = 0; j < table.getColumnCount(); j++) {
                table.setValueAt("",i,j);    
            }
        }
       
    }
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        String filePath="C:\\Users\\bhara\\Documents\\NetBeansProjects\\Coursework\\src\\coursework\\csv.csv";//use forward slash
        try {
            BufferedReader bufferreader=new BufferedReader(new FileReader(filePath));
            String line="";
            int nextRow =0;
            while((line=bufferreader.readLine())!=null){
                String[] data=line.split(",");
                for(int i =0;i<data.length;i++){
                    table.setValueAt(data[i], nextRow, i);
                }
                nextRow++;
            }
            
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            System.out.println("No Data");
        }
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
       int con = JOptionPane.showConfirmDialog(this,"Do you want to Exit??");
       if(con==0){
           System.exit(0);  
       }
       else{
           
       }
    }//GEN-LAST:event_jMenuItem2ActionPerformed
    
    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed

        String kitID = kitIDField.getText().trim();
        String kitName = kitNameField.getText().trim();
        String brand = brandField.getText().trim();
        String size = sizeField.getText().trim();
        int price=0;
        try{
            price = Integer.parseInt(priceField.getText().trim());
        }
        catch(Exception E){
            //priceFocus.setText("*Invalid Number");
        }
        String category = (String) categoryCombo.getSelectedItem();
        String recommendation = (String) recommendationCombo.getSelectedItem();
        String quality = "";
        if(originalCheck.isSelected()){
            quality = originalCheck.getText();
        }
        if(highcopyCheck.isSelected()){
            quality = highcopyCheck.getText();
        }
        if(duplicateCheck.isSelected()){
            quality = duplicateCheck.getText();
        }
        String priceRan = "";
        if(lowRadio.isSelected()){
            priceRan = lowRadio.getText();
        }
        if(mediumRadio.isSelected()){
            priceRan = mediumRadio.getText();
        }
        if(highRadio.isSelected()){
            priceRan = highRadio.getText();
        }
        int nextRow = 0; // for table rows
        boolean empty = false;
        String s;
        int colCount = table.getColumnCount();
        ArrayList <String> list = new ArrayList<String>(); 
        if(categoryCombo.getSelectedIndex() != 0){
            if (!kitID.isEmpty()){
                if(!kitName.isEmpty()){
                    if(!quality.isEmpty()){
                        if(!brand.isEmpty()){
                            if(!size.isEmpty()){
                                if(!priceRan.isEmpty()){
                                    if(price > 0){
                                        if(recommendationCombo.getSelectedIndex() != 0){
                                            // to check the validity of the unique kiID
                                            boolean emptyy  = false;
                                            int nextRoww = 0;
                                            String st;
                                            int colCounts = table.getColumnCount();
                                           // getting data from table and storing in the arraylist
                                            while(!emptyy){
                                                st = (String) table.getValueAt(nextRoww,0);
                                                if(st == null){
                                                    emptyy = true;
                                                }
                                                else{
                                                    for (int i = 0; i < colCounts; i++) {
                                                        String data = (String) table.getValueAt(nextRoww,i);
                                                            list.add(data);       
                                                            }
                                                        nextRoww++;
                                                    }
                                            }
                                            //condition for checking the validy of the unique kitID
                                            if(list.contains(kitID)){
                                                JOptionPane.showMessageDialog(jPanel2,"Another Kit with same ID already exists.");
                                            }
                                            // if the ID is unique then the values are added to the jTable
                                            else{
                                                String data[] = {category,kitID,kitName,quality,brand,size,priceRan,""+price,recommendation};
                                            do{ 
                                                s = (String) table.getValueAt(nextRow,0);
                                                if(s != null && s.length() !=0){
                                                    nextRow ++;
                                                }
                                                else{
                                                    empty = true;
                                                }
                                            } while(!empty);
                                            for (int i = 0; i < colCount; i++) {
                                                table.setValueAt(data[i],nextRow,i);
                                            }
                                            // after the values are added
                                            JOptionPane.showMessageDialog(jPanel1,"Value added SuccessFully");
                                            kitIDField.setText("");
                                            kitNameField.setText("");
                                            brandField.setText("");
                                            sizeField.setText("");
                                            priceField.setText("");
                                            categoryCombo.setSelectedIndex(0);
                                            recommendationCombo.setSelectedIndex(0);
                                            originalCheck.setSelected(false);
                                            highcopyCheck.setSelected(false);
                                            duplicateCheck.setSelected(false);
                                            lowRadio.setSelected(false);
                                            mediumRadio.setSelected(false);
                                            highRadio.setSelected(false);
                                            qualityBtnGrp.clearSelection();
                                            priceRangeBtnGrp.clearSelection();
                                            // for the focuses
                                            recommendationFocus.setText(" ");
                                            categoryFocus.setText(" ");
                                            kitIDFocus.setText(" ");
                                            kitNameFocus.setText(" ");
                                            brandFocus.setText(" ");
                                            sizeFocus.setText(" ");
                                            priceFocus.setText(" ");
                                            priceRanFocus.setText(" ");
                                            qualityFocus.setText(" ");
                                            }
                                            
                                            
                                            
                                        }
                                        else{
                                            recommendationFocus.setText("*Required Field");
                                            recommendationCombo.grabFocus();
                                            categoryFocus.setText(" ");
                                            kitIDFocus.setText(" ");
                                            kitNameFocus.setText(" ");
                                            brandFocus.setText(" ");
                                            sizeFocus.setText(" ");
                                            priceFocus.setText(" ");
                                            priceRanFocus.setText(" ");
                                            qualityFocus.setText(" ");
                                        }
                                    }
                                    else{
                                        recommendationFocus.setText(" ");
                                        categoryFocus.setText(" ");
                                        kitIDFocus.setText(" ");
                                        kitNameFocus.setText(" ");
                                        brandFocus.setText(" ");
                                        sizeFocus.setText(" ");
                                        priceFocus.setText("*Invalid Number");
                                        priceRanFocus.setText(" ");
                                        qualityFocus.setText(" ");
                                        priceField.setText("");
      
                                    }
                                }
                                else{
                                    recommendationFocus.setText(" ");
                                    categoryFocus.setText(" ");
                                    kitIDFocus.setText(" ");
                                    kitNameFocus.setText(" ");
                                    brandFocus.setText(" ");
                                    sizeFocus.setText(" ");
                                    priceFocus.setText("");
                                    priceRanFocus.setText("*Required Field");
                                    qualityFocus.setText(" ");
                                    lowRadio.grabFocus();
                                }
                            }
                            else{
                                recommendationFocus.setText(" ");
                                categoryFocus.setText(" ");
                                kitIDFocus.setText(" ");
                                kitNameFocus.setText(" ");
                                brandFocus.setText(" ");
                                sizeFocus.setText("*Required Field");
                                priceFocus.setText(" ");
                                priceRanFocus.setText(" ");
                                qualityFocus.setText(" ");
                                
                            }
                        }
                        else{
                            recommendationFocus.setText(" ");
                            categoryFocus.setText(" ");
                            kitIDFocus.setText(" ");
                            kitNameFocus.setText(" ");
                            brandFocus.setText("*Required Field");
                            sizeFocus.setText(" ");
                            priceFocus.setText(" ");
                            priceRanFocus.setText(" ");
                            qualityFocus.setText(" ");
                        }
                    }
                    else{
                        recommendationFocus.setText(" ");
                        categoryFocus.setText(" ");
                        kitIDFocus.setText(" ");
                        kitNameFocus.setText(" ");
                        brandFocus.setText(" ");
                        sizeFocus.setText(" ");
                        priceFocus.setText(" ");
                        priceRanFocus.setText(" ");
                        qualityFocus.setText("*Required Field");
                        originalCheck.grabFocus();
                    }
                }
                else{
                    recommendationFocus.setText(" ");
                    categoryFocus.setText(" ");
                    kitIDFocus.setText(" ");
                    kitNameFocus.setText("*Required Field");
                    brandFocus.setText(" ");
                    sizeFocus.setText(" ");
                    priceFocus.setText(" ");
                    priceRanFocus.setText(" ");
                    qualityFocus.setText(" ");
                    
                }
            }
            else{
                recommendationFocus.setText(" ");
                categoryFocus.setText(" ");
                kitIDFocus.setText("*Required Field");
                kitNameFocus.setText(" ");
                brandFocus.setText(" ");
                sizeFocus.setText(" ");
                priceFocus.setText(" ");
                priceRanFocus.setText(" ");
                qualityFocus.setText(" ");
            }
        }
        else{
            recommendationFocus.setText(" ");
            categoryFocus.setText("*Required Field");
            categoryCombo.grabFocus();
            kitIDFocus.setText(" ");
            kitNameFocus.setText(" ");
            brandFocus.setText(" ");
            sizeFocus.setText(" ");
            priceFocus.setText(" ");
            priceRanFocus.setText(" ");
            qualityFocus.setText(" ");
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        kitIDField.setText("");
        kitNameField.setText("");
        brandField.setText("");
        sizeField.setText("");
        priceField.setText("");
        categoryCombo.setSelectedIndex(0);
        recommendationCombo.setSelectedIndex(0);
        qualityBtnGrp.clearSelection();
        originalCheck.setSelected(false);
        highcopyCheck.setSelected(false);
        duplicateCheck.setSelected(false);
        qualityBtnGrp.clearSelection();
        priceRangeBtnGrp.clearSelection();
        lowRadio.setSelected(false);
        mediumRadio.setSelected(false);
        highRadio.setSelected(false);
        // for the focuses
        recommendationFocus.setText(" ");
        categoryFocus.setText(" ");
        kitIDFocus.setText(" ");
        kitNameFocus.setText(" ");
        brandFocus.setText(" ");
        sizeFocus.setText(" ");
        priceFocus.setText(" ");
        priceRanFocus.setText(" ");
        qualityFocus.setText(" ");
    }//GEN-LAST:event_clearBtnActionPerformed

    private void highRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highRadioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_highRadioActionPerformed

    private void mediumRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mediumRadioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mediumRadioActionPerformed

    private void sizeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizeFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sizeFieldActionPerformed

    private void kitIDFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kitIDFieldActionPerformed

    }//GEN-LAST:event_kitIDFieldActionPerformed

    private void priceFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceFieldActionPerformed

    private void categoryComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_categoryComboActionPerformed

    private void categorySearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categorySearchBtnActionPerformed
        boolean empty  = false;
        int nextRow = 0;
        String s;
        int colCount = table.getColumnCount();
        ArrayList <String> al = new ArrayList <String>();
            // getting data from table and storing in the arraylist
            while(!empty){
                s = (String) table.getValueAt(nextRow,0);
                if(s == null){
                    empty = true;
                }
                else{
                    for (int i = 0; i < colCount; i++) {
                    String data = (String) table.getValueAt(nextRow,i);
                    al.add(data);       
                    }
               nextRow++;
                }
            }
            // implementing the search for category
            int count = 0;
            ArrayList <String> searchData=  new ArrayList <String>();
            String find = (String) categorySearchBox.getSelectedItem();
            for (int i = 0; i < al.size(); i++) {
                if (al.get(i).equals(find)) {
                    count++;
                    searchData.add(al.get(i+2));
                }
            }
                if (count > 0) {
                    JOptionPane.showMessageDialog(jPanel4, "There are "+count+" items in the selected category..."+"\nThey are: "+ searchData);
                }
                else{
                    JOptionPane.showMessageDialog(jPanel4,"Sorry!, There are no items in this category");
                }
    }//GEN-LAST:event_categorySearchBtnActionPerformed

    private void helpMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuActionPerformed
       
    }//GEN-LAST:event_helpMenuActionPerformed

    private void helpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuItemActionPerformed
        try {
            File file = new File("C:\\Users\\bhara\\Documents\\NetBeansProjects\\Coursework\\src\\coursework\\help.pdf");  
            Desktop desktop = Desktop.getDesktop();  
            desktop.open(file);
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "File not found");
        }
    }//GEN-LAST:event_helpMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CW().setVisible(true);
            }
        });
    }
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private java.awt.TextField brandField;
    private javax.swing.JLabel brandFocus;
    private javax.swing.JLabel brandLabel;
    private javax.swing.JComboBox<String> categoryCombo;
    private javax.swing.JLabel categoryFocus;
    private javax.swing.JLabel categoryLabel;
    private javax.swing.JComboBox<String> categorySearchBox;
    private javax.swing.JButton categorySearchBtn;
    private javax.swing.JButton clearBtn;
    private javax.swing.JCheckBox duplicateCheck;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JRadioButton highRadio;
    private javax.swing.JCheckBox highcopyCheck;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private java.awt.TextField kitIDField;
    private javax.swing.JLabel kitIDFocus;
    private javax.swing.JLabel kitIDLabel;
    private java.awt.TextField kitNameField;
    private javax.swing.JLabel kitNameFocus;
    private javax.swing.JLabel kitNameLabel;
    private javax.swing.JRadioButton lowRadio;
    private javax.swing.JRadioButton mediumRadio;
    private javax.swing.JCheckBox originalCheck;
    private java.awt.TextField priceField;
    private javax.swing.JLabel priceFocus;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JLabel priceRanFocus;
    private javax.swing.JLabel priceRanLabel;
    private javax.swing.ButtonGroup priceRangeBtnGrp;
    private javax.swing.JButton priceSearchBtn;
    private javax.swing.JTextField priceSearchField;
    private javax.swing.ButtonGroup qualityBtnGrp;
    private javax.swing.JLabel qualityFocus;
    private javax.swing.JLabel qualityLabel;
    private javax.swing.JComboBox<String> recommendationCombo;
    private javax.swing.JLabel recommendationFocus;
    private javax.swing.JLabel recommendationLabel;
    private java.awt.TextField sizeField;
    private javax.swing.JLabel sizeFocus;
    private javax.swing.JLabel sizeLabel;
    private javax.swing.JButton sortBtn;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

}
